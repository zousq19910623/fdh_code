#!/usr/bin/env node

/**
 * Module dependencies.
 */

//房东汇
var app = require('../app');
var http = require('http');
var config = require('../routes/js/config.js');
var cluster = require('cluster');
var logger = require('../routes/js/logger.js');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(config.Server.port || '3002');
app.set('port', port);

/**
 * Create HTTP server.
 */
 
if(config.Server.isCluster && cluster.isMaster){
	logger.debug("宿主启动...");

	for (var i = 0; i < numCPUs; i++) {
		cluster.fork();
	}
	i=0;
	cluster.on('listening',function(worker,address){
		logger.debug('核心 pid:'+ worker.process.pid + " 启动");
	});
	cluster.on('exit', function(worker, code, signal) {
		logger.debug('核心 pid:'+ worker.process.pid+' 重启');
		setTimeout(function() {cluster.fork();},2000);
	});
}else{
	var server = http.createServer(app);

	/**
	 * Listen on provided port, on all network interfaces.
	 */
	
	server.listen(port);
	server.on('error', onError);
	server.on('listening', onListening);
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  logger.debug('Listening on ' + bind);
}
